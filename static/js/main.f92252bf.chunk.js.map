{"version":3,"sources":["App.module.css","img/virus_logo.png","components/Cards/Cards.module.css","components/Header/Header.tsx","utils/helpers.ts","components/Cards/Cards.tsx","components/CardItem/CardItem.tsx","components/Chart/Chart.tsx","components/CountryChooser/CountryChooser.tsx","components/Loader/Loader.tsx","Api/Api.ts","redux/actions/actions.ts","App.tsx","serviceWorker.ts","redux/reducer/reducer.ts","redux/store.ts","index.tsx","components/CardItem/CardItem.module.css","components/Header/Header.module.css","components/Loader/Loader.module.css"],"names":["module","exports","Header","className","styles","container","component","variant","img","src","logo","alt","dateParser","dateString","Date","toDateString","Cards","cases","Grid","spacing","style","item","xs","zeroMinWidth","count","confirmed","date","lastUpdate","color","recovered","deaths","CardItem","children","cardStyle","Card","join","CardContent","header","align","gutterBottom","start","end","separator","defaults","global","defaultFontColor","Chart","dailyData","country","countryData","countrySelect","lineData","labels","datasets","label","borderCapStyle","borderColor","pointBorderColor","backgroundColor","data","barData","padding","marginBottom","CountryChooser","countries","category","fetch","onSelectGlobal","menuItems","map","i","key","value","FormControl","NativeSelect","onChange","e","target","Loader","lds_ripple","instance","Axios","create","baseURL","api","getCasesData","a","get","response","cValue","rValue","dValue","getDailyData","forEach","el","push","totalConfirmed","total","reportDate","getCountries","name","getCountryCases","actions","type","savedData","connect","state","isLoading","daily","dispatch","fetchingData","casesData","payload","fetchingCountryCases","countryCasesData","fetchCountryCases","theme","createMuiTheme","palette","useEffect","ThemeProvider","Boolean","window","location","hostname","match","initialState","error","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f92252bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","module.exports = __webpack_public_path__ + \"static/media/virus_logo.172ef026.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\"};","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\n\r\nimport styles from './Header.module.css';\r\nimport logo from '../../img/virus_logo.png';\r\n\r\n\r\nconst Header: React.FC = () => {\r\n    return <div className={styles.container}>\r\n        <Typography component='h1' variant='h2'>COVID-19</Typography>\r\n        <img className={styles.img} src={logo} alt=\"COVID-19\" />\r\n    </div>;\r\n};\r\n\r\nexport default Header;","/**\r\n * @description get string from JSON and Parse to human like format date\r\n * @param {string} dateString\r\n * @returns {string}\r\n */\r\n\r\nexport const dateParser = (dateString: string): string => {\r\n    return new Date(dateString).toDateString();\r\n};\r\n","import React from 'react';\r\nimport style from './Cards.module.css';\r\nimport { Grid } from '@material-ui/core';\r\nimport { CardItem } from '../index';\r\nimport { CasesItem } from '../../types/types';\r\nimport { dateParser } from '../../utils/helpers';\r\n\r\n/* TYPES */\r\n\r\ntype Props = {\r\n    cases: CasesItem;\r\n}\r\n\r\n/* /TYPES */\r\n\r\nconst Cards: React.FC<Props> = ({cases}) => {\r\n    return (\r\n        <Grid container spacing={2} className={style.container}>\r\n            <Grid item xs={4} zeroMinWidth>\r\n                <CardItem count={cases.confirmed} date={dateParser(cases.lastUpdate)} color=\"blue\">Confirmed cases</CardItem>\r\n            </Grid>\r\n            <Grid item xs={4} zeroMinWidth>\r\n                <CardItem count={cases.recovered} date={dateParser(cases.lastUpdate)} color=\"green\">Recovered cases</CardItem>\r\n            </Grid>\r\n            <Grid item xs={4} zeroMinWidth>\r\n                <CardItem count={cases.deaths} date={dateParser(cases.lastUpdate)} color=\"red\">Death cases</CardItem>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Cards;","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport style from './CardItem.module.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n/* TYPES */\r\n\r\ntype OwnProps = {\r\n    count: number | null;\r\n    date: string;\r\n    color: string;\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n/* /TYPES */\r\n\r\nconst CardItem: React.FC<Props> = ({ count,date,color,children }) => {\r\n    const cardStyle = [style[color]];\r\n    return (\r\n        <Card className={cardStyle.join(' ')}>\r\n            <CardContent>\r\n                <Typography\r\n                    className={style.header}\r\n                    component=\"h2\"\r\n                    variant=\"h5\"\r\n                    align=\"center\"\r\n                    color=\"textPrimary\"\r\n                >\r\n                    {children}\r\n                </Typography>\r\n                <Typography\r\n                    component=\"p\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom={true}\r\n                >\r\n                    Count:\r\n                    <span className={style.count}>\r\n                        <CountUp start={0} end={count===null ? 0 : count} separator=\",\"/>\r\n                    </span>\r\n\r\n                </Typography>\r\n                <Typography\r\n                    component=\"p\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom={true}\r\n                >\r\n\r\n                    Last update: {date}\r\n\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CardItem;","import React from 'react';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport { CountryCases, DailyData } from '../../types/types';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { defaults } from 'react-chartjs-2';\r\n\r\ndefaults.global.defaultFontColor ='#FFF';\r\n\r\ntype Props = {\r\n    dailyData: DailyData;\r\n    country: string;\r\n    countryData: CountryCases;\r\n    countrySelect: boolean;\r\n}\r\n\r\nconst Chart: React.FC<Props> = ({ dailyData, country, countryData, countrySelect }) => {\r\n    const lineData = {\r\n        labels:dailyData.date,\r\n        datasets:[\r\n            {\r\n                label:'Confirmed cases',\r\n                borderCapStyle: 'butt',\r\n                borderColor: '#3c0084',\r\n                pointBorderColor: '#3c0084',\r\n                backgroundColor: 'rgba(60,0,132,0.44)',\r\n                data:dailyData.confirmed\r\n            },\r\n            {\r\n                label:'Deaths cases',\r\n                borderCapStyle: 'butt',\r\n                borderColor: '#842445',\r\n                pointBorderColor: '#842445',\r\n                backgroundColor: 'rgba(132,36,69,0.58)',\r\n                data:dailyData.deaths\r\n            }\r\n        ],\r\n\r\n    };\r\n    const barData={\r\n        labels: ['confirmed', 'recovered', 'deaths'],\r\n        datasets: [{\r\n            label:'Count of people',\r\n            backgroundColor:['rgba(60,0,132,0.44)','rgba(24,132,50,0.56)','rgba(132,36,69,0.58)'],\r\n            data:[countryData.confirmed,countryData.recovered,countryData.deaths]\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <Grid container style={{padding:'20px'}}>\r\n            <Grid item xs={12}>\r\n                <Typography component='h2' variant='h3' align='center' style={{marginBottom:'20px'}}>\r\n                    {countrySelect ? country : 'Global'} statistic on today:\r\n                </Typography>\r\n                {countrySelect ? <Bar data={barData}/> : <Line data={lineData}/>}\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};\r\n\r\nexport default Chart;","import React from 'react';\r\nimport { FormControl,  NativeSelect } from '@material-ui/core';\r\n\r\n/* TYPES */\r\n\r\ntype Props = {\r\n    countries: string[];\r\n    category: string;\r\n    fetch: (category: string) => void;\r\n    onSelectGlobal: () => void;\r\n}\r\n\r\n/* /TYPES */\r\n\r\nconst CountryChooser: React.FC<Props> = ({ countries, category, fetch, onSelectGlobal }) => {\r\n\r\n    const countryHandler = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        (e.target.value === 'global') ? onSelectGlobal() : fetch(e.target.value);\r\n    };\r\n\r\n    const menuItems = countries.map((country, i) => (\r\n        <option key={i} value={country}>{country}</option>\r\n    ));\r\n\r\n    return(\r\n        <FormControl>\r\n            <NativeSelect value={category} onChange={countryHandler}>\r\n                <option value=\"global\">Global</option>\r\n                {menuItems}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryChooser;","import React from 'react';\r\nimport style from './Loader.module.css';\r\n\r\nconst Loader: React.FC = () => {\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.lds_ripple}>\r\n                <div />\r\n                <div />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import Axios from 'axios';\r\nimport { GetCasesDataType, GetDailyDataType, GetCountriesType, GetCountryCasesType, CasesItem, DailyData, CovidState, CountryCases } from '../types/types';\r\n\r\nconst instance = Axios.create({baseURL: 'https://covid19.mathdro.id'});\r\n\r\n\r\n\r\nexport const api = {\r\n    getCasesData: async (): Promise<CasesItem> => {\r\n        const response = await instance.get<GetCasesDataType>('/api');\r\n        const {confirmed: {value: cValue}, recovered: {value: rValue}, deaths: {value: dValue}, lastUpdate} = response.data;\r\n        return {confirmed: cValue, recovered: rValue, deaths: dValue, lastUpdate};\r\n    },\r\n\r\n    getDailyData: async (): Promise<DailyData> => {\r\n        const response = await instance.get<GetDailyDataType>('/api/daily');\r\n        const confirmed: number[] = [];\r\n        const deaths: number[] = [];\r\n        const date: string[] = [];\r\n        response.data.forEach((el) => {\r\n            confirmed.push(el.totalConfirmed);\r\n            deaths.push(el.deaths.total);\r\n            date.push(el.reportDate);\r\n        });\r\n        return {confirmed, deaths, date};\r\n    },\r\n\r\n    getCountries: async(): Promise<CovidState['countries']> => {\r\n        const response = await instance.get<GetCountriesType>('/api/countries');\r\n        return response.data.countries.map((el) => el.name);\r\n    },\r\n\r\n    getCountryCases: async (country: string): Promise<CountryCases> => {\r\n        const response = await instance.get<GetCountryCasesType>(`/api/countries/${country}`);\r\n        const {confirmed: {value: cValue}, recovered: {value: rValue}, deaths: {value: dValue}} = response.data;\r\n        return {confirmed: cValue, recovered: rValue, deaths: dValue};\r\n    }\r\n};","import { Action, Dispatch } from 'redux';\r\nimport { SavedDataObj } from '../../types/types';\r\nimport { api } from '../../Api/Api';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '../store';\r\n\r\n/*\r\n!inferValueTypes<T> - infer types from actions {type:'',...} and make UNION type of AC-s func\r\n*/\r\n\r\ntype inferValueTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\nexport const actions = {\r\n    loading: () => ({ type: 'LOADING_START' } as const),\r\n    endLoading: () => ({ type: 'LOADING_END' } as const),\r\n    setCategory: (category: string) =>\r\n        ({ type: 'SET_CATEGORY', category } as const),\r\n    selectCountry: () => ({ type: 'SELECT_COUNTRY' } as const),\r\n    selectGlobal: () => ({ type: 'SELECT_GLOBAL' } as const),\r\n    saveData: (savedData: SavedDataObj) =>\r\n        ({ type: 'SAVE_DATA', savedData } as const),\r\n};\r\n\r\nexport type actionsTypes = ReturnType<inferValueTypes<typeof actions>>;\r\n\r\n/*  THUNKS */\r\n\r\nexport const fetchData = (): ThunkAction<\r\n    void,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n> => async (dispatch: Dispatch): Promise<void> => {\r\n    dispatch(actions.loading());\r\n    const casesData = await api.getCasesData();\r\n    const dailyData = await api.getDailyData();\r\n    const countries = await api.getCountries();\r\n    dispatch(actions.saveData({ key: 'cases', payload: casesData }));\r\n    dispatch(actions.saveData({ key: 'daily', payload: dailyData }));\r\n    dispatch(actions.saveData({ key: 'countries', payload: countries }));\r\n    dispatch(actions.endLoading());\r\n};\r\n\r\nexport const fetchCountryCases = (\r\n    category: string\r\n): ThunkAction<void, RootState, unknown, Action<string>> => async (\r\n    dispatch: Dispatch\r\n): Promise<void> => {\r\n    const countryCasesData = await api.getCountryCases(category);\r\n    dispatch(actions.selectCountry());\r\n    dispatch(actions.setCategory(category));\r\n    dispatch(actions.saveData({ key: 'country', payload: countryCasesData }));\r\n};\r\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { Action } from 'redux';\n\nimport style from './App.module.css';\nimport { Header, Cards, Chart, CountryChooser, Loader } from './components';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { RootState } from './redux/store';\nimport { actions, fetchCountryCases, fetchData } from './redux/actions/actions';\n\n/* TYPES */\n\ntype StateProps = Omit<RootState, 'error'>;\n\ntype DispatchProps = {\n    fetchingData: () => void;\n    fetchingCountryCases: (category: string) => void;\n    onSelectGlobal: () => void;\n};\ntype Props = StateProps & DispatchProps;\n\n/* TYPES */\n\nconst mapStateToProps = (state: RootState): StateProps => {\n    return {\n        cases: state.cases,\n        isLoading: state.isLoading,\n        daily: state.daily,\n        countries: state.countries,\n        category: state.category,\n        countrySelect: state.countrySelect,\n        country: state.country,\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<RootState, unknown, Action>\n): DispatchProps => {\n    return {\n        fetchingData: () => dispatch(fetchData()),\n        fetchingCountryCases: (category) =>\n            dispatch(fetchCountryCases(category)),\n        onSelectGlobal: () => dispatch(actions.selectGlobal()),\n    };\n};\n\nconst App: React.FC<Props> = ({\n    cases,\n    isLoading,\n    fetchingData,\n    daily,\n    countries,\n    category,\n    fetchingCountryCases,\n    countrySelect,\n    country,\n    onSelectGlobal,\n}) => {\n    const theme = createMuiTheme({ palette: { type: 'dark' } });\n\n    useEffect(() => {\n        (async () => fetchingData())();\n    }, [fetchingData]);\n\n    if (isLoading) return <Loader />;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={style.container}>\n                <Header />\n                <Cards cases={cases} />\n                <CountryChooser\n                    countries={countries}\n                    category={category}\n                    fetch={fetchingCountryCases}\n                    onSelectGlobal={onSelectGlobal}\n                />\n                <Chart\n                    dailyData={daily}\n                    country={category}\n                    countryData={country}\n                    countrySelect={countrySelect}\n                />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CovidState } from '../../types/types';\r\nimport {actionsTypes} from '../actions/actions';\r\n\r\nconst initialState: CovidState = {\r\n    cases: {\r\n        confirmed: null,\r\n        recovered: null,\r\n        deaths: null,\r\n        lastUpdate: ''\r\n    },\r\n    daily: {\r\n        confirmed: [],\r\n        deaths: [],\r\n        date: []\r\n    },\r\n    country: {\r\n        confirmed: null,\r\n        recovered: null,\r\n        deaths: null\r\n    },\r\n    countrySelect: false,\r\n    countries: [],\r\n    category: 'global',\r\n    isLoading: true,\r\n    error: ''\r\n};\r\n\r\n\r\nexport const reducer = (state = initialState, action: actionsTypes): CovidState => {\r\n    switch (action.type) {\r\n    case 'LOADING_START': {\r\n        return { ...state, isLoading: true };\r\n    }\r\n    case 'LOADING_END': {\r\n        return { ...state, isLoading: false };\r\n    }\r\n    case 'SET_CATEGORY': {\r\n        return { ...state, category: action.category };\r\n    }\r\n    case 'SAVE_DATA': {\r\n        switch (action.savedData.key) {\r\n        case 'cases': {\r\n            return { ...state, cases: { ...state.cases, ...action.savedData.payload }};\r\n        }\r\n        case 'daily': {\r\n            return { ...state, daily: { ...state.daily, ...action.savedData.payload }};\r\n        }\r\n        case 'countries': {\r\n            return { ...state, countries: [...state.countries, ...action.savedData.payload]};\r\n        }\r\n        case 'country': {\r\n            return { ...state, country: { ...state.country, ...action.savedData.payload }};\r\n        }\r\n        default: return {...state, error: 'Incorrect saved data format'};\r\n        }\r\n\r\n    }\r\n    case 'SELECT_COUNTRY': {\r\n        return { ...state, countrySelect: true };\r\n    }\r\n    case 'SELECT_GLOBAL': {\r\n        return { ...state, countrySelect: false, category: 'global' };\r\n    }\r\n\r\n    default: return state;\r\n\r\n    }\r\n};","import {applyMiddleware, createStore} from 'redux';\r\nimport {reducer} from './reducer/reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n\r\nexport type RootState = ReturnType<typeof reducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"CardItem_header__q-s6f\",\"count\":\"CardItem_count__3mhAd\",\"green\":\"CardItem_green__21ed0\",\"blue\":\"CardItem_blue__3AuIV\",\"red\":\"CardItem_red__2xm7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__1VC87\",\"img\":\"Header_img__3ifQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loader_container__3LFDG\",\"lds_ripple\":\"Loader_lds_ripple__1-tX1\"};"],"sourceRoot":""}